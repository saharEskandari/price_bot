# -*- coding: utf-8 -*-
"""Untitled76.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kc3S-Q3m7Ps3gJcfAsk1-8qp4jlL6g0-
"""

TOKEN = "7702743601:AAEZ1pbvamYx7A-omTRNicK5fs3c_YFl7QI"
import requests
from bs4 import BeautifulSoup

url = "https://www.tgju.org/profile/price_dollar_rl"

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")

price_element = soup.find("td", class_="text-left")
if price_element:
    price = price_element.text.strip()
    print(f"💵 قیمت لحظه‌ای دلار: {price} تومان")
else:
    print("❌ قیمت پیدا نشد")


import nest_asyncio
import asyncio
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from keep_alive import keep_alive  # ایمپورت سرور Flask

nest_asyncio.apply()

async def get_dollar_price():
    url = "https://www.tgju.org/profile/price_dollar_rl"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")
    
    price_element = soup.find("td", class_="text-left")
    return price_element.text.strip() if price_element else "❌ قیمت پیدا نشد"

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("سلام! برای دریافت قیمت دلار از دستور /price استفاده کنید.")

async def price(update: Update, context: CallbackContext) -> None:
    price = await get_dollar_price()
    await update.message.reply_text(f"💵 قیمت لحظه‌ای دلار: {price} تومان")

async def main():
    keep_alive()  # اجرای سرور Flask برای جلوگیری از خاموش شدن
    
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))
    
    print("🤖 Bot is running...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
